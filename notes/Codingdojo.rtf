{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Monaco;
\f3\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red57\green57\blue57;\red236\green249\blue255;\red38\green38\blue38;
\red245\green245\blue247;\red51\green51\blue51;\red0\green115\blue195;\red116\green0\blue4;\red242\green242\blue242;
\red117\green117\blue117;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 confirm\
.length\
prompt("What is your name?");\
\pard\pardeftab720\ql\qnatural

\f1\b\fs26 \cf2 \cb3 INSTRUCTIONS\
\pard\pardeftab720\ql\qnatural

\b0\fs30 \cf4 Use the 
\f2\fs28 \cb5 prompt
\f1\fs30 \cb3  command to ask the user where they are from.\
\pard\pardeftab720\ql\qnatural

\b\fs46 \cf6 \cb1 Data Types I & II: Numbers & Strings\
\pard\pardeftab720\sa400\ql\qnatural

\b0\fs30 \cf4 Data comes in various 
\b types
\b0 . You have used two already!\

\b a. numbers
\b0  are quantities, just like you're used to. You can do math with them.\

\b b. strings
\b0  are sequences of characters, like the letters 
\f2\fs28 \cb5 a-z
\f1\fs30 \cb1 , spaces, and even numbers. These are all strings: 
\f2\fs28 \cb5 "Ryan"
\f1\fs30 \cb1 , 
\f2\fs28 \cb5 "4"
\f1\fs30 \cb1  and 
\f2\fs28 \cb5 "What is your name?"
\f1\fs30 \cb1  Strings are extremely useful as labels, names, and content for your programs.\
\pard\pardeftab720\ql\qnatural

\b\fs46 \cf6 Data Type III: Booleans\
\pard\pardeftab720\sa400\ql\qnatural

\b0\fs30 \cf4 The third type of data is a 
\b boolean
\b0  (pronounced "bool-ee-un" and named after {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/George_Boole"}}{\fldrslt \cf7 George Boole}}). A boolean can have only two values, 
\f2\fs28 \cb5 true
\f1\fs30 \cb1  or 
\f2\fs28 \cb5 false
\f1\fs30 \cb1 .\
You can use them in your code by making statements that 
\b evaluate
\b0  to 
\f2\fs28 \cb5 true
\f1\fs30 \cb1  or 
\f2\fs28 \cb5 false
\f1\fs30 \cb1 .\

\b For example
\b0 :
\f3 \uc0\u8232 \u8232 
\f1 1. 
\f2\fs28 \cb5 10 > 3
\f1\fs30 \cb1  evaluates to 
\f2\fs28 \cb5 true
\f3\fs30 \cb1 \uc0\u8232 
\f1 2. 
\f2\fs28 \cb5 5 < 4
\f1\fs30 \cb1  is just crazy talk, so it evaluates to 
\f2\fs28 \cb5 false
\f1\fs30 \cb1 \
Booleans are extremely useful because later they will let us run certain parts of our code only 
\i \cf4 if
\i0 \cf4  certain conditions are 
\f2\fs28 \cb5 true
\f1\fs30 \cb1 . For example, ATMs evaluate 
\f2\fs28 \cb5 [the amount in your bank account] > 0
\f1\fs30 \cb1  and will only give you cash if the answer is 
\f2\fs28 \cb5 true
\f1\fs30 \cb1 .\
\pard\pardeftab720\ql\qnatural

\b\fs46 \cf6 Using console.log\
\pard\pardeftab720\sa400\ql\qnatural

\b0\fs30 \cf4 You may have noticed that the interpreter doesn't print out every single thing it does. So if we want to know what it's thinking, we sometimes have to ask it to speak to us.\
\pard\pardeftab720\sa400\ql\qnatural

\f2\fs28 \cf4 \cb5 console.log()
\f1\fs30 \cb1  will take whatever is inside the parentheses and 
\i \cf4 log
\i0 \cf4  it to the 
\i \cf4 console
\i0 \cf4  below your code\'97that's why it's called 
\f2\fs28 \cb5 console.log()
\f1\fs30 \cb1 !\
This is commonly called 
\b printing out
\b0 .\
<?php\
        $sentence = array("I'm ", "learning ", "PHP!");\
        \
        foreach ($sentence as $word) \{\
          echo $word;\
        \}\
\pard\pardeftab720\sa400\ql\qnatural

\f2 \cf4 \cb5 strlen()
\f1 \cf4 \cb1  is one of the most common String functions in PHP. You pass it a string, or variable containing a string, and it returns the number of characters in that string. An example might be:\
\pard\pardeftab720\ql\qnatural

\f2\fs26 \cf8 \cb9 <?php\cf4 \
  \cf10 // get the length of a string and\cf4 \
  \cf10 // print it to the screen\cf4 \
  $length = strlen(\cf8 "david"\cf4 );\
  print $length;\
\cf8 ?>\
\
\pard\pardeftab720\ql\qnatural

\f1\b\fs48 \cf6 \cb1 String Functions I\
\pard\pardeftab720\sa400\ql\qnatural

\b0\fs30 \cf4 Another very common string function is 
\f2 \cf4 \cb5 substr()
\f1 \cf4 \cb1 . This function allows you to return a substring (piece of) of your string.\
You pass this function the string you want to get a substring of, the character in your string to start at, and how many characters you want after your starting point. An example might be:\
\pard\pardeftab720\ql\qnatural

\f2\fs26 \cf4 \cb9 $myname = "David";\
\
// you can manipulate strings easily\
// with built-in funtions too\
$partial = substr($myname, 0, 3);\
print $partial;\
// prints "dav"\
\pard\pardeftab720\sa400\ql\qnatural

\f1\i\fs30 \cf4 \cb1 NOTE:
\i0 \cf4  the second parameter (the starting character) is based on a zero-indexed array (
\i \cf4 i.e.
\i0 \cf4  the first character in your string is number 0, not number 1).\
Two other very useful string functions are 
\f2 \cf4 \cb5 strtoupper()
\f1 \cf4 \cb1  and 
\f2 \cf4 \cb5 strtolower()
\f1 \cf4 \cb1 , which make your entire string 
\i \cf4 UPPERCASE
\i0 \cf4  or 
\i \cf4 lowercase
\i0 \cf4 . Here is an example of each:\
\pard\pardeftab720\ql\qnatural

\f2\fs26 \cf4 \cb9 $uppercase = strtoupper($myname);\
print $uppercase;\
// prints "DAVID"\
\
$lowercase = strtolower($uppercase);\
print $lowercase;\
// prints "david"\
\pard\pardeftab720\sa400\ql\qnatural

\f1\fs30 \cf4 \cb1 You can also call these functions on a string directly, like so:\
\pard\pardeftab720\ql\qnatural

\f2\fs26 \cf4 \cb9 print strtolower("David");\
// prints "david"\
_____________\
$names=array("Ashely, "Aiden", "Susan", "Chris", "Stefka", "Hristian", "Velko", "Veselin", "Plament");\
\
$names = array("ashley", "aiden", "susan");\
rsort($names);\
print join(", ", $names);\
\
$fav_cars=array();\
array_push($fav_cars, "Mercedes");\
array_push($fav_cars, "Mercedes GL");\
array_push($fav_cars, "BMW");\
array_push($fav_cars, "Mazda");\
array_push($fav_cars, "PORSCHE");\
print count($fav_cars);\
\
JAVASCRIPT\
IF/Else\
// This is an example of an if / else statement.\
\
if (12 / 4 === "Ari".length) \{\
    confirm("Will this run the first block?");\
\} else \{\
    confirm("Or the second block?");\
\}
\f1\fs30 \cf4 \cb1 \
\pard\pardeftab720\sa400\ql\qnatural
\cf4 \
\cf4 \cb3 \
}